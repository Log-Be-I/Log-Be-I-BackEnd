package com.springboot.report.controller;

import com.springboot.auth.utils.CustomPrincipal;
import com.springboot.report.dto.ReportDto;
import com.springboot.report.entity.Report;
import com.springboot.report.mapper.ReportMapper;
import com.springboot.report.service.ReportService;
import com.springboot.responsedto.SingleResponseDto;
import com.springboot.utils.UriCreator;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;


import java.net.URI;

@RestController
@RequestMapping("/reports")
@RequiredArgsConstructor
@Validated
public class ReportController {
    private final static String REPORT_DEFAULT_URL = "/reports";
    private final ReportService reportService;
    private final ReportMapper mapper;
//    private final ChatGptService chatGptService;


    @PostMapping
    public ResponseEntity postReport(@RequestBody ReportDto.Post post,
                                     @AuthenticationPrincipal CustomPrincipal customPrincipal) {
        post.setMemberId(customPrincipal.getMemberId());
        Report report = reportService.createReport(mapper.reportPostToReport(post), customPrincipal.getMemberId());
        URI location = UriCreator.createUri(REPORT_DEFAULT_URL);
        return ResponseEntity.created(location).body(new SingleResponseDto<>(mapper.reportToReportResponse(report)));
    }

//    @PostMapping("/gpt-test")
//    public ResponseEntity testGpt(@RequestBody GptRequest request) {
////        try {
////            String content = request.getContent();
////            String response = chatGptService.getGptResponse(content).block(); // Ïó¨Í∏∞ÏÑú ÏòàÏô∏ ÌÑ∞ÏßÄÎ©¥ catch Îê®
////            System.out.println("üéØ GPT ÏùëÎãµ: " + response);
////            return ResponseEntity.ok(response);
////        } catch (Exception e) {
////            System.out.println("‚ùå ÏòàÏô∏ Î∞úÏÉù: " + e.getMessage());
////            e.printStackTrace();
////            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("GPT Ìò∏Ï∂ú Ïã§Ìå®: " + e.getMessage());
////        }
//
////                String content = request.getContent();
////        ReportAnalysisResponse response = chatGptService.getGptResponse(content).block();
////        Mono<ReportAnalysisResponse> response = chatGptService.getGptResponse(request.getContent());
//
////        String content = request.getContent();
////        ReportAnalysisResponse response = chatGptService.getGptResponse(content).block();
////        ReportAnalysisResponse response = chatGptService.getGptResponse(content)
////                .doOnNext(result -> System.out.println("‚úÖ GPT Í≤∞Í≥º ÏàòÏã† ÏôÑÎ£å"))
////                .doOnError(error -> {
////                    System.err.println("‚ùå GPT Ìò∏Ï∂ú Ï§ë ÏóêÎü¨: " + error.getMessage());
////                    error.printStackTrace();
////                })
////                .block();
//
//        return ResponseEntity.ok(response);
////        return chatGptService.getGptResponse(content)
////
//// Î∂ÑÏÑùÍ≤∞Í≥ºÎ•º 200(OK) Î°ú Í∞êÏã∏Ï§å
////                .map(result -> ResponseEntity.ok(result))
////               //ÎèôÍ∏∞ -> Í≤∞Í≥ºÍ∞Ä ÎÇòÏò¨ÎïåÍπåÏßÄ Í∏∞Îã§Î¶∞Îã§.
////                .block();
//
//    }
}
